#Test
CONSTANTS:

DIFFICULTY_HARD = 2
DIFFICULTY_MEDIUM = 1
DIFFICULTY_EASY = 0
ROLE_ADMIN = 2
ROLE_STAFF = 1
ROLE_USER = 0
BOOL_TRUE = 1
BOOL_FALSE = 0

PATHS:

/backend/user/create (POST) # For creating user accounts
-arguments:
sessionid 
username (username of the user to be created)
password (password of the user to be created)
role (role of the user to be created)
displayname (optional) (displayname of user to be created)

-response:

HTTP response 201 if creation is successful
json with fields:
userid (uuid of logged in user)
role (role of logged in user)


HTTP response 400 otherwise


/backend/user/update/password (POST) # For updating user password
-arguments:
sessionid
oldpassword (session user's old password)
newpassword (session user's new password)

-response:
returns HTTP response 200 if successful

HTTP response 400 if oldpassword does not match current password
HTTP response 400 otherwise


/backend/user/update/displayname (POST) # For updating user password
-arguments:
sessionid
displayname (session user's new displayname)

-response:
returns HTTP response 200 if successful

HTTP response 400 otherwise


/backend/user/login (POST) # For logging into a session
-arguments:
username (username to login)
password (password to login)

-response:
sessionid , HTTP response 200 if login is successful
HTTP response 400 otherwise


/backend/user/logout (POST) # For logging out of session
-arguments:
sessionid

-response:
returns HTTP response 200 if successful


/backend/user/get (GET) # For getting user info
-arguments:
sessionid

userid (uuid of user to get info from)

-response:
returns HTTP response 200 if successful
json with fields:
username (username of user)
displaynane (display name of user)


/backend/user/multi/get (GET) # For listing users in system (only allowed to medical staff and above)
-arguments:
sessionid

role (role of users to list)

-response:
returns HTTP response 200 if successful
json with fields:
users (array of Users)

-User format:
uuid (uuid of user)
username (username of user)
displaynane (display name of user)

/backend/question/assign/get (GET) # For getting question sets for user
-arguments:
sessionid
userid (uuid of user to retrieve questions from)

-response:
returns HTTP response 200 if successful
json with fields:
assignments (array of userassignments)

-userassignment format:
userid
questions (array of questionids)


/backend/question/assign/create (POST) # For creating user assignments for user
-arguments:
sessionid
userid (uuid of user to create questions for)
questions (array of questionids to assign to user)
difficulty (difficulty of questions)

-response:
returns HTTP response 201 if successful
json with fields:
questions (array of questionids)


/backend/question/assign/start (POST) # For starting assignments for user
-arguments:
sessionid
assignmentid (assignmentid of assignment to start)

-response:
returns HTTP response 200 if successful
json with fields:
assignments (assignment object)

-assignment format:
assignmentid (unique id of assignment)
userid (userid of assignment)
questions (array of questionids for assignment)
anstoken (uuid to return when completing assignment)


/backend/question/assign/complete (POST) # For completing assignments for user
-arguments:
sessionid
assignmentid (id of assignment to complete)
anstoken (uuid of token from start assignment)
answers (array of bools in int form for user's answers)

-response:
score (the user's score for the assignment)
returns HTTP response 200 if successful


/backend/question/get (GET) # For getting question info 
-arguments:
sessionid

questionid (questionid of question to retrieve)

-response:
returns HTTP response 200 if successful
json with fields:
questionid
answer
difficulty
qnimg1 (base64 encoded jpg image)
qnimg2 (base64 encoded jpg image)


/backend/question/create (POST) # For creating an empty question in the system
-arguments:
sessionid

-response:
returns HTTP response 201 if successful


/backend/question/update (POST) # For updating a question in the system
-arguments:
sessionid

questionid(id of question)
qnimg1(base64 encoded jpg image)(optional)
qnimg2(base64 encoded jpg image)(optional)
answer(boolean for whether images are similar)(optional)
difficulty(positive number from 0 to 32767 inclusive)(optional)

-response:
returns HTTP response 200 if successful


/backend/question/multi/get (GET) # For getting multiple question info 
-arguments:
sessionid

difficulty (difficulty in int to retrieve, retrieves all questions if empty)

-response:
returns HTTP response 200 if successful
json with fields:
questions (array of questions)

-Question format:
questionid
answer
difficulty
qnimg1 (jpg in base64)
qnimg2 (jpg in base64)


/backend/question/assign/get (GET) # For getting user assignments
-arguments:
sessionid

userid (userid of question assignments to retrieve)

-response:
returns HTTP response 200 if successful
assignments (array of assignments)

-assignment format:
assignmentid (unique id of assignment)
userid (userid of assignment)
questions (array of questionids for assignment)
anstoken (uuid to return when completing assignment, empty until complete assignment function is called)

/backend/question/result/create (POST) # For creating new result entries
-arguments:
sessionid

userid (userid of result to create)

-response:
returns HTTP response 201 if successful


/backend/question/result/multi/get (POST) # For getting all the results for a user
-arguments:
sessionid

userid (userid of results to retrieve)

-response:
returns HTTP response 200 if successful
json with fields:
results (array of results)

-result format:
resultid
userid
qnsanswered
qnscorrect
attemptdatetime
completiontime
difficulty